//+------------------------------------------------------------------+
//|                                                     CapChannel.mq5 |
//|                                                       Manus Agent |
//|                                             https://www.manus.im/ |
//+------------------------------------------------------------------+
#property copyright "Manus Agent"
#property link      "https://www.manus.im/"
#property version   "1.00"
#property indicator_separate_window
#property indicator_buffers 3
#property indicator_plots   3

#property indicator_label1  "Upper Band"
#property indicator_type1   DRAW_LINE
#property indicator_color1  clrBlue
#property indicator_style1  STYLE_SOLID
#property indicator_width1  1

#property indicator_label2  "Middle Line (TMA)"
#property indicator_type2   DRAW_LINE
#property indicator_color2  clrRed
#property indicator_style2  STYLE_SOLID
#property indicator_width2  1

#property indicator_label3  "Lower Band"
#property indicator_type3   DRAW_LINE
#property indicator_color3  clrGreen
#property indicator_style3  STYLE_SOLID
#property indicator_width3  1

//--- input parameters
input int      InpPeriodTMA = 20;    // Period for Triangular Moving Average
input int      InpPeriodATR = 14;    // Period for Average True Range
input double   InpATRMultiplier = 2.0; // Multiplier for ATR bands

//--- indicator buffers
double ExtMapBuffer1[]; // Upper Band
double ExtMapBuffer2[]; // Middle Line (TMA)
double ExtMapBuffer3[]; // Lower Band

//--- handles
int h_atr;

//--- TMA calculation function
double CalculateTMA(const double &price[], int period, int index)
  {
   if(index < period - 1)
      return(EMPTY_VALUE);
      
   double sum = 0.0;
   double weight_sum = 0.0;
   int half_period = (period + 1) / 2;
   
   for(int i = 0; i < period; i++)
     {
      int weight;
      if(i < half_period)
         weight = i + 1;
      else
         weight = period - i;
         
      sum += price[index - period + 1 + i] * weight;
      weight_sum += weight;
     }
     
   return(sum / weight_sum);
  }

//+------------------------------------------------------------------+
//| Custom indicator initialization function                         |
//+------------------------------------------------------------------+
int OnInit()
  {
//--- indicator buffers mapping
   SetIndexBuffer(0, ExtMapBuffer1, INDICATOR_DATA);
   SetIndexBuffer(1, ExtMapBuffer2, INDICATOR_DATA);
   SetIndexBuffer(2, ExtMapBuffer3, INDICATOR_DATA);
   
   PlotIndexSetString(0, PLOT_LABEL, "Upper Band");
   PlotIndexSetString(1, PLOT_LABEL, "Middle Line (TMA)");
   PlotIndexSetString(2, PLOT_LABEL, "Lower Band");
   
//--- create handle for ATR
   h_atr = iATR(_Symbol, _Period, InpPeriodATR);
   
   if(h_atr == INVALID_HANDLE)
     {
      Print("Failed to create handle for ATR indicator");
      return(INIT_FAILED);
     }

//---
   return(INIT_SUCCEEDED);
  }

//+------------------------------------------------------------------+
//| Custom indicator iteration function                              |
//+------------------------------------------------------------------+
int OnCalculate(const int rates_total,
                const int prev_calculated,
                const datetime &time[],
                const double &open[],
                const double &high[],
                const double &low[],
                const double &close[],
                const long &tick_volume[],
                const long &volume[],
                const int &spread[])
  {
//--- check for minimum bars
   if(rates_total < InpPeriodTMA || rates_total < InpPeriodATR)
      return(0);

//--- calculate TMA (Middle Line)
   for(int i = prev_calculated; i < rates_total; i++)
     {
      ExtMapBuffer2[i] = CalculateTMA(close, InpPeriodTMA, i);
     }

//--- calculate ATR and bands
   double atr_values[];
   ArrayResize(atr_values, rates_total);
   int copied_atr = CopyBuffer(h_atr, 0, 0, rates_total, atr_values);
   if(copied_atr <= 0)
     {
      Print("Failed to copy ATR buffer");
      return(0);
     }

   for(int i = prev_calculated; i < rates_total; i++)
     {
      if(ExtMapBuffer2[i] != EMPTY_VALUE && atr_values[i] != EMPTY_VALUE)
        {
         ExtMapBuffer1[i] = ExtMapBuffer2[i] + (atr_values[i] * InpATRMultiplier);
         ExtMapBuffer3[i] = ExtMapBuffer2[i] - (atr_values[i] * InpATRMultiplier);
        }
      else
        {
         ExtMapBuffer1[i] = EMPTY_VALUE;
         ExtMapBuffer3[i] = EMPTY_VALUE;
        }
     }

//--- return value of prev_calculated for next call
   return(rates_total);
  }
//+------------------------------------------------------------------+
